buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath "org.flywaydb:flyway-gradle-plugin:$project.ext.flywayVersion"
    classpath 'org.postgresql:postgresql:9.4-1201-jdbc41'
    classpath 'com.bluepapa32:gradle-watch-plugin:0.1.5'
  }
}

apply plugin: 'war'
apply plugin: 'groovy'
apply plugin: 'com.bluepapa32.watch'

sourceSets {
  integrationTest {
    java.srcDir 'src/integrationTest/java'
    resources.srcDir 'src/integrationTest/resources'
    compileClasspath = sourceSets.main.output + configurations.testCompile
    runtimeClasspath = output + compileClasspath + configurations.testCompile
  }
}

configurations {
  apt.description 'for annotation processors'
}

ext {
  wildflyVersion = '8.2.0.Final'
  resteasyVersion = '3.0.10.Final'
  hibernateVersion = '4.3.7.Final'
  hibernateValidatorVersion = '5.1.3.Final'
  keycloakVersion = '1.1.0.Final'
  arquillianVersion = '1.1.5.Final'
}

dependencies {
  providedCompile 'javax:javaee-api:7.0'
  providedCompile "org.hibernate:hibernate-core:$hibernateVersion"
  apt "org.hibernate:hibernate-jpamodelgen:$hibernateVersion"
  providedCompile "org.hibernate:hibernate-validator:$hibernateValidatorVersion"
  apt 'org.jboss.logging:jboss-logging-processor:1.2.0.Final'

  providedCompile 'org.projectlombok:lombok:1.16.2'

  compile "org.flywaydb:flyway-core:$project.ext.flywayVersion"

  testCompile "junit:junit:$project.ext.junitVersion"
  testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'

  // TODO apply integrationTestCompile
  testCompile "org.jboss.arquillian.junit:arquillian-junit-container:$arquillianVersion"
  testCompile "org.jboss.arquillian.protocol:arquillian-protocol-servlet:$arquillianVersion"
  testCompile 'org.arquillian.cube:arquillian-cube-docker:1.0.0.Alpha3'
  testRuntime "org.wildfly:wildfly-arquillian-container-remote:$wildflyVersion"
  testCompile 'org.jboss.shrinkwrap.resolver:shrinkwrap-resolver-gradle-depchain:2.2.0-beta-1'
}

// apt
def generatedJavaSrcDir = 'build/generated-sources/main/java'
sourceSets.main.java.srcDirs += [generatedJavaSrcDir]

task procJava(type: JavaCompile, group: 'build', description: 'Annotation processing') {
  def aptDestDir = new File(project.projectDir, generatedJavaSrcDir)
  source = project.sourceSets.main.java.srcDirs.findAll {
    !it.equals(aptDestDir)
  }

  classpath = project.configurations.compile
  options.compilerArgs.addAll '-proc:only', '-implicit:none',
    '-processorpath', project.configurations.apt.asPath
  destinationDir = aptDestDir
}
compileJava.dependsOn procJava

// tests
test {
  reports.html.destination = file("${reports.html.destination}/unit")
  reports.junitXml.destination = file("${reports.junitXml.destination}/unit")
}

task integrationTest(type: Test) {
  group = 'verification'
  description = 'Runs the integration tests.'

  testClassesDir = sourceSets.integrationTest.output.classesDir
  classpath = sourceSets.integrationTest.runtimeClasspath

  reports.html.destination = file("${reports.html.destination}/integration")
  reports.junitXml.destination = file("${reports.junitXml.destination}/integration")
}

// rewrite version.properties
import org.apache.tools.ant.filters.ReplaceTokens
processResources {
  filter(ReplaceTokens, tokens: [
    'version': project.version,
    'git.commit.id': 'git rev-parse HEAD'.execute().text.trim(),
    'git.commit.id.short': 'git rev-parse --short HEAD'.execute().text.trim()
  ])
}

// flyway
apply plugin: 'org.flywaydb.flyway'

flyway {
  url System.properties['database.url']
  user System.properties['database.user']
  password System.properties['database.password']
}

// watch
watch {
  java {
    files files('src/main/java')
    tasks 'war'
  }
}